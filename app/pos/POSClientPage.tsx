"use client"

import type React from "react"

import { useEffect, useState, useRef, useCallback } from "react"
import { createClient, type SupabaseClient } from "@supabase/supabase-js"
import jsPDF from "jspdf"
import emailjs from "@emailjs/browser" // Ensure this is installed: npm install @emailjs/browser
import { useRouter } from "next/navigation" // For navigation
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import {
  Search,
  Loader2,
  XCircle,
  UserPlus,
  AlertTriangle,
  LogIn,
  LogOut,
  ShoppingCart,
  FileText,
  Tag,
  UserCircle,
  ListChecks,
  BarChart2,
} from "lucide-react" // Added more icons

// Initialize Supabase client
const supabase: SupabaseClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
)

// Define a simple Customer type
interface Customer {
  id: string
  first_name: string
  last_name: string
  email?: string | null
  phone?: string | null
}

interface CartItem {
  name: string
  price: number
  qty: number
  sku?: string // Added SKU for completeness
  id?: string // inventory item id
}

interface Part {
  name: string
  price: number
  sku: string
  id: string
  stock: number
}

interface Reward {
  id?: string // Optional as it's generated by DB
  customer_name: string // Changed from 'customer' to be more specific
  customer_id?: string | null
  gbt_awarded: number | null
  source: string | null
  timestamp: string
}

interface Ticket {
  id?: string
  customer_name: string
  customer_id?: string | null
  items: CartItem[]
  total: number
  store_id: string | null
  status: string
  created_at: string
  assigned_technician?: string | null
}

interface Store {
  id: string
  name: string
  vertical: string
}

type StoreVertical = keyof typeof verticalCategories

const verticalCategories: Record<string, string[]> = {
  electronics: ["Mobile", "Tablet", "Apple Watch", "Game Console", "Mac & PC", "Micro-Soldering"],
  medical: ["Patient Monitors", "Infusion Pumps", "Dental Chairs"],
  auto: ["EV Repair", "Diagnostics", "Audio Systems"],
  industrial: ["Forklift", "Hydraulics", "HVAC", "Heavy Machinery"],
  pool: ["Pool Robot", "Pump Repair", "Chlorinator", "Lighting"],
  agriculture: ["Tractor", "Seeder", "Sprayer", "Drone Calibration"],
  homeOffice: ["Furniture", "Smart Devices", "Handyman", "Electrical"],
}

export default function POSClientPage() {
  const router = useRouter()
  const [cart, setCart] = useState<CartItem[]>([])
  const [skuInput, setSkuInput] = useState("")
  const [parts, setParts] = useState<Part[]>([])
  const [currentVertical, setCurrentVertical] = useState<StoreVertical>("electronics")
  const [rewards, setRewards] = useState<Reward[]>([])
  const [estimateMode, setEstimateMode] = useState(false)
  const [currentStoreId, setCurrentStoreId] = useState<string | null>(null)
  const [stores, setStores] = useState<Store[]>([])
  const [technicianTickets, setTechnicianTickets] = useState<Ticket[]>([])
  const [lowStockAlerts, setLowStockAlerts] = useState<Part[]>([])
  const [isTechClockedIn, setIsTechClockedIn] = useState(false)
  const [techName, setTechName] = useState("")

  // Customer Search State
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [customerSearchQuery, setCustomerSearchQuery] = useState("")
  const [customerSearchResults, setCustomerSearchResults] = useState<Customer[]>([])
  const [isCustomerSearching, setIsCustomerSearching] = useState(false)
  const [showCustomerDropdown, setShowCustomerDropdown] = useState(false)
  const customerSearchTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const customerSearchContainerRef = useRef<HTMLDivElement>(null)

  const loadInitialData = useCallback(async () => {
    try {
      const { data: invData, error: invError } = await supabase.from("inventory").select("id, name, price, sku, stock")
      if (invError) throw invError
      setParts(invData || [])
      const lowStockItems = invData?.filter((p) => p.stock < 3) || []
      setLowStockAlerts(lowStockItems)
      if (lowStockItems.length > 0) {
        // Consider a less intrusive notification than alert
        // alert(`Low stock warning for: ${lowStockItems.map(p => p.name).join(', ')}`);
        console.warn("Low stock items:", lowStockItems)
      }

      const { data: storeData, error: storeError } = await supabase.from("stores").select("id, name, vertical")
      if (storeError) throw storeError
      setStores(storeData || [])
      if (storeData?.[0]) {
        setCurrentStoreId(storeData[0].id)
        setCurrentVertical(storeData[0].vertical as StoreVertical)
      }

      const { data: rewardsData, error: rewardsError } = await supabase
        .from("rewards")
        .select("id, customer_name, customer_id, gbt_awarded, source, timestamp") // Adjusted select
        .order("timestamp", { ascending: false })
        .limit(10) // Limit initial load
      if (rewardsError) throw rewardsError
      setRewards(rewardsData || [])

      const { data: ticketsData, error: ticketsError } = await supabase
        .from("tickets")
        .select("id, customer_name, customer_id, items, total, store_id, status, created_at, assigned_technician") // Adjusted select
        .order("created_at", { ascending: false })
        .limit(10) // Limit initial load
      if (ticketsError) throw ticketsError
      setTechnicianTickets(ticketsData || [])
    } catch (error) {
      console.error("Error loading initial POS data:", error)
      // Add user-facing error (e.g., toast notification)
    }
  }, [])

  useEffect(() => {
    loadInitialData()
  }, [loadInitialData])

  // Click outside handler for customer search dropdown
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (customerSearchContainerRef.current && !customerSearchContainerRef.current.contains(event.target as Node)) {
        setShowCustomerDropdown(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [])

  const fetchCustomers = useCallback(async (query: string) => {
    if (!query.trim() || query.trim().length < 2) {
      setCustomerSearchResults([])
      setShowCustomerDropdown(false)
      return
    }
    setIsCustomerSearching(true)
    setShowCustomerDropdown(true)
    try {
      const searchTerm = `%${query}%`
      const { data, error } = await supabase
        .from("customers")
        .select("id, first_name, last_name, email, phone")
        .or(
          `first_name.ilike.${searchTerm},last_name.ilike.${searchTerm},email.ilike.${searchTerm},phone.ilike.${searchTerm}`,
        )
        .limit(10)
      if (error) throw error
      setCustomerSearchResults(data || [])
    } catch (error) {
      console.error("Error fetching customers:", error)
      setCustomerSearchResults([])
    } finally {
      setIsCustomerSearching(false)
    }
  }, [])

  const handleCustomerSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const query = e.target.value
    setCustomerSearchQuery(query)
    setSelectedCustomer(null) // Clear selected customer if search query changes
    if (customerSearchTimeoutRef.current) {
      clearTimeout(customerSearchTimeoutRef.current)
    }
    customerSearchTimeoutRef.current = setTimeout(() => {
      fetchCustomers(query)
    }, 300)
  }

  const handleSelectCustomer = (customer: Customer) => {
    setSelectedCustomer(customer)
    setCustomerSearchQuery(`${customer.first_name} ${customer.last_name}`)
    setShowCustomerDropdown(false)
    setCustomerSearchResults([])
  }

  const handleClearSelectedCustomer = () => {
    setSelectedCustomer(null)
    setCustomerSearchQuery("")
    setShowCustomerDropdown(false)
  }

  const addToCart = () => {
    if (!skuInput.trim()) return
    const searchTerm = skuInput.toLowerCase().trim()
    const foundPart = parts.find(
      (p) => p.name.toLowerCase() === searchTerm || (p.sku && p.sku.toLowerCase() === searchTerm),
    )

    if (!foundPart) {
      alert("Item not found in inventory.")
      return
    }

    setCart((prevCart) => {
      const existingItemIndex = prevCart.findIndex((item) => item.sku === foundPart.sku)
      if (existingItemIndex > -1) {
        const updatedCart = [...prevCart]
        updatedCart[existingItemIndex].qty += 1
        return updatedCart
      } else {
        return [
          ...prevCart,
          { id: foundPart.id, name: foundPart.name, price: foundPart.price, qty: 1, sku: foundPart.sku },
        ]
      }
    })
    setSkuInput("")
  }

  const updateCartItemQuantity = (sku: string, newQty: number) => {
    setCart(
      (currentCart) =>
        currentCart
          .map((item) => (item.sku === sku ? { ...item, qty: Math.max(0, newQty) } : item))
          .filter((item) => item.qty > 0), // Remove item if quantity is 0
    )
  }

  const subtotal = cart.reduce((acc, item) => acc + item.price * item.qty, 0)
  const taxRate = 0.07 // Example tax rate
  const tax = subtotal * taxRate
  const discount = 0 // Placeholder for discount logic
  const total = subtotal + tax - discount

  const generatePDF = useCallback(() => {
    const doc = new jsPDF()
    const customerDisplayName = selectedCustomer
      ? `${selectedCustomer.first_name} ${selectedCustomer.last_name}`
      : "Walk-in Customer"
    doc.setFontSize(18)
    doc.text(`RepairHQ ${estimateMode ? "Estimate" : "Invoice"}`, 20, 20)
    doc.setFontSize(12)
    doc.text(`Customer: ${customerDisplayName}`, 20, 30)
    if (selectedCustomer?.email) {
      doc.text(`Email: ${selectedCustomer.email}`, 20, 37)
    }
    let yPos = selectedCustomer?.email ? 47 : 40

    cart.forEach((item) => {
      doc.text(`${item.qty}x ${item.name} (@ $${item.price.toFixed(2)})`, 20, yPos)
      doc.text(`$${(item.price * item.qty).toFixed(2)}`, 170, yPos, { align: "right" })
      yPos += 7
    })
    yPos += 3
    doc.line(20, yPos, 190, yPos) // Separator
    yPos += 7

    doc.text(`Subtotal:`, 140, yPos)
    doc.text(`$${subtotal.toFixed(2)}`, 170, yPos, { align: "right" })
    yPos += 7
    doc.text(`Tax (${(taxRate * 100).toFixed(0)}%):`, 140, yPos)
    doc.text(`$${tax.toFixed(2)}`, 170, yPos, { align: "right" })
    yPos += 7
    if (discount > 0) {
      doc.text(`Discount:`, 140, yPos)
      doc.text(`-$${discount.toFixed(2)}`, 170, yPos, { align: "right" })
      yPos += 7
    }
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text(`Total:`, 140, yPos)
    doc.text(`$${total.toFixed(2)}`, 170, yPos, { align: "right" })
    return doc
  }, [cart, selectedCustomer, estimateMode, subtotal, tax, discount, total, taxRate])

  const sendEmailReceipt = useCallback(
    (pdfDoc: jsPDF) => {
      if (!selectedCustomer?.email) {
        console.warn("No customer email to send receipt.")
        // alert("Customer email not provided. Cannot send email receipt.");
        return
      }
      // IMPORTANT: Replace with your actual EmailJS service, template, and user IDs
      const SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || "YOUR_SERVICE_ID"
      const TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID || "YOUR_TEMPLATE_ID"
      const USER_ID = process.env.NEXT_PUBLIC_EMAILJS_USER_ID || "YOUR_USER_ID"

      if (SERVICE_ID === "YOUR_SERVICE_ID" || TEMPLATE_ID === "YOUR_TEMPLATE_ID" || USER_ID === "YOUR_USER_ID") {
        alert(
          "EmailJS is not configured. Please set up your EmailJS IDs in environment variables or directly in the code.",
        )
        console.error("EmailJS not configured.")
        return
      }

      try {
        const pdfOutput = pdfDoc.output("datauristring") // Get PDF as base64
        const templateParams = {
          to_name: selectedCustomer.first_name,
          to_email: selectedCustomer.email,
          from_name: "RepairHQ", // Or your store name
          message_html: `Thank you for your business, ${selectedCustomer.first_name}! Your ${estimateMode ? "estimate" : "invoice"} is attached.`,
          invoice_pdf: pdfOutput.split(",")[1], // Send only the base64 part
          subject_line: `Your ${estimateMode ? "Estimate" : "Invoice"} from RepairHQ`,
        }

        emailjs.send(SERVICE_ID, TEMPLATE_ID, templateParams, USER_ID).then(
          (response) => {
            console.log("EmailJS SUCCESS!", response.status, response.text)
            alert(`Email receipt sent to ${selectedCustomer.email}`)
          },
          (error) => {
            console.error("EmailJS FAILED...", error)
            alert(`Failed to send email receipt: ${error.text || "Unknown error"}`)
          },
        )
      } catch (error) {
        console.error("Error preparing email:", error)
        alert("An error occurred while preparing the email receipt.")
      }
    },
    [selectedCustomer, estimateMode],
  )

  const handleCheckout = async () => {
    if (cart.length === 0) {
      alert("Cart is empty.")
      return
    }

    const customerDisplayName = selectedCustomer
      ? `${selectedCustomer.first_name} ${selectedCustomer.last_name}`
      : "Walk-in Customer"
    const customerIdToLog = selectedCustomer ? selectedCustomer.id : null

    if (estimateMode) {
      const { error } = await supabase.from("estimates").insert([
        {
          customer_name: customerDisplayName,
          customer_id: customerIdToLog,
          total,
          items: cart,
          store_id: currentStoreId,
          created_at: new Date().toISOString(),
        },
      ])
      if (error) {
        alert(`Error saving estimate: ${error.message}`)
        return
      }
      alert("Estimate saved.")
      const pdfDoc = generatePDF()
      if (selectedCustomer?.email) sendEmailReceipt(pdfDoc)
      else pdfDoc.save(`estimate-${Date.now()}.pdf`)
      setCart([])
      handleClearSelectedCustomer()
      setEstimateMode(false) // Reset estimate mode
      return
    }

    // Regular Checkout (Invoice, Ticket, Rewards)
    const { data: invoiceData, error: invoiceError } = await supabase
      .from("invoices")
      .insert([
        {
          customer_name: customerDisplayName,
          customer_id: customerIdToLog,
          total,
          items: cart,
          store_id: currentStoreId,
          created_at: new Date().toISOString(),
        },
      ])
      .select()
      .single()

    if (invoiceError) {
      alert(`Error creating invoice: ${invoiceError.message}`)
      return
    }

    await supabase.from("tickets").insert([
      {
        customer_name: customerDisplayName,
        customer_id: customerIdToLog,
        items: cart,
        total,
        store_id: currentStoreId,
        status: "Open", // Default status
        created_at: new Date().toISOString(),
        invoice_id: invoiceData?.id, // Link ticket to invoice
      },
    ])

    const gbtAwarded = Math.floor(total / 10)
    if (gbtAwarded > 0) {
      await supabase.from("rewards").insert([
        {
          customer_name: customerDisplayName,
          customer_id: customerIdToLog,
          gbt_awarded: gbtAwarded,
          source: "pos_checkout",
          timestamp: new Date().toISOString(),
        },
      ])
    }

    // Update inventory stock
    for (const item of cart) {
      const partToUpdate = parts.find((p) => p.sku === item.sku)
      if (partToUpdate) {
        const newStock = partToUpdate.stock - item.qty
        await supabase.from("inventory").update({ stock: newStock }).eq("id", partToUpdate.id)
      }
    }
    // Refresh parts list to reflect new stock
    const { data: updatedInvData } = await supabase.from("inventory").select("id, name, price, sku, stock")
    setParts(updatedInvData || [])
    const updatedLowStock = updatedInvData?.filter((p) => p.stock < 3) || []
    setLowStockAlerts(updatedLowStock)

    const pdfDoc = generatePDF()
    if (selectedCustomer?.email) sendEmailReceipt(pdfDoc)
    else pdfDoc.save(`invoice-${Date.now()}.pdf`)

    alert("Checkout complete. Ticket & Invoice created. Rewards added. Inventory updated.")
    setCart([])
    handleClearSelectedCustomer()
    loadInitialData() // Refresh rewards and tickets lists
  }

  const handleClockInOut = async () => {
    if (!techName.trim()) {
      alert("Please enter technician name.")
      return
    }
    const newClockedInStatus = !isTechClockedIn
    setIsTechClockedIn(newClockedInStatus)
    try {
      await supabase.from("activity_logs").insert([
        {
          tech_name: techName,
          action: newClockedInStatus ? "Clock In" : "Clock Out",
          timestamp: new Date().toISOString(),
          store_id: currentStoreId,
        },
      ])
      alert(`Technician ${techName} ${newClockedInStatus ? "Clocked In" : "Clocked Out"}.`)
    } catch (error) {
      console.error("Error logging clock in/out:", error)
      alert("Failed to log clock in/out activity.")
      setIsTechClockedIn(!newClockedInStatus) // Revert UI on error
    }
  }

  const getCreateTicketUrl = () => {
    const params = new URLSearchParams()
    params.append("vertical", currentVertical)
    if (selectedCustomer) {
      params.append("customerId", selectedCustomer.id)
      params.append("customerName", `${selectedCustomer.first_name} ${selectedCustomer.last_name}`)
    }
    return `/tickets/new?${params.toString()}`
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 p-6 bg-gray-100 min-h-screen">
      {/* Left Column: Main POS Interaction (Customer, Item Entry, Cart) */}
      <div className="lg:col-span-2 space-y-6">
        {/* Technician Clock In/Out */}
        <Card>
          <CardContent className="p-6 flex flex-col sm:flex-row gap-4 items-center">
            <UserCircle className="h-10 w-10 text-blue-600 hidden sm:block" />
            <Input
              type="text"
              placeholder="Technician Name"
              value={techName}
              onChange={(e) => setTechName(e.target.value)}
              className="p-2 border rounded flex-grow text-base"
              disabled={isTechClockedIn}
            />
            <Button
              onClick={handleClockInOut}
              className={`px-6 py-2 rounded text-white w-full sm:w-auto text-base ${
                isTechClockedIn ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700"
              }`}
            >
              {isTechClockedIn ? <LogOut className="mr-2 h-5 w-5" /> : <LogIn className="mr-2 h-5 w-5" />}
              {isTechClockedIn ? "Clock Out" : "Clock In"}
            </Button>
          </CardContent>
        </Card>

        {/* Customer Search Section */}
        <Card>
          <CardContent className="p-6 space-y-3" ref={customerSearchContainerRef}>
            <label htmlFor="customer-search" className="block text-sm font-medium text-gray-700">
              Customer
            </label>
            {selectedCustomer ? (
              <div className="flex items-center justify-between p-3 border rounded-md bg-green-50 text-green-700">
                <div>
                  <p className="font-semibold">
                    {selectedCustomer.first_name} {selectedCustomer.last_name}
                  </p>
                  <p className="text-xs">
                    {selectedCustomer.email} {selectedCustomer.phone && `· ${selectedCustomer.phone}`}
                  </p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleClearSelectedCustomer}
                  className="text-red-500 hover:text-red-700"
                >
                  <XCircle className="h-4 w-4 mr-1" /> Clear
                </Button>
              </div>
            ) : (
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <Input
                  id="customer-search"
                  type="text"
                  placeholder="Search (Name, Email, Phone) or leave blank for Walk-in"
                  value={customerSearchQuery}
                  onChange={handleCustomerSearchChange}
                  onFocus={() => customerSearchQuery && fetchCustomers(customerSearchQuery)}
                  className="pl-10 pr-10 py-2 text-base"
                />
                {isCustomerSearching && (
                  <Loader2 className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400 animate-spin" />
                )}
              </div>
            )}
            {showCustomerDropdown && customerSearchResults.length > 0 && (
              <Card className="absolute z-20 mt-1 w-full max-w-md shadow-lg border-gray-300 bg-white">
                <CardContent className="max-h-60 overflow-y-auto p-0">
                  {customerSearchResults.map((customer) => (
                    <div
                      key={customer.id}
                      className="p-3 hover:bg-gray-100 cursor-pointer border-b last:border-b-0"
                      onClick={() => handleSelectCustomer(customer)}
                    >
                      <p className="font-medium text-sm">
                        {customer.first_name} {customer.last_name}
                      </p>
                      <p className="text-xs text-gray-500">
                        {customer.email} {customer.phone && `· ${customer.phone}`}
                      </p>
                    </div>
                  ))}
                </CardContent>
              </Card>
            )}
            {showCustomerDropdown &&
              !isCustomerSearching &&
              customerSearchResults.length === 0 &&
              customerSearchQuery && (
                <p className="text-xs text-gray-500 p-2">
                  No customers found. You can
                  <Button
                    variant="link"
                    size="sm"
                    className="p-0 ml-1 h-auto text-xs"
                    onClick={() =>
                      router.push(`/customers/new?name=${encodeURIComponent(customerSearchQuery)}&redirect=/pos`)
                    }
                  >
                    create a new one
                  </Button>
                  .
                </p>
              )}
            {!selectedCustomer && (
              <div className="text-xs text-gray-600 mt-1">
                <UserPlus className="inline h-3 w-3 mr-1 text-blue-500" />
                Walk-in Customer. Or,{" "}
                <Button
                  variant="link"
                  size="sm"
                  className="p-0 ml-0 h-auto text-xs"
                  onClick={() =>
                    router.push(`/customers/new?name=${encodeURIComponent(customerSearchQuery)}&redirect=/pos`)
                  }
                >
                  create new customer
                </Button>
                .
              </div>
            )}
          </CardContent>
        </Card>

        {/* Item Entry Section */}
        <Card>
          <CardContent className="p-6">
            <label htmlFor="sku-input" className="block text-sm font-medium text-gray-700 mb-1">
              Add Item to Cart
            </label>
            <div className="flex gap-2">
              <Input
                id="sku-input"
                type="text"
                placeholder="Enter item name, SKU or scan barcode"
                value={skuInput}
                onChange={(e) => setSkuInput(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && addToCart()}
                className="flex-grow py-2 text-base"
              />
              <Button onClick={addToCart} className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 text-base">
                <ShoppingCart className="mr-2 h-5 w-5" /> Add
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Cart Display Section */}
        <Card>
          <CardContent className="p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">Shopping Cart</h2>
            {cart.length === 0 ? (
              <p className="text-gray-500">Your cart is empty.</p>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                {cart.map((item) => (
                  <div
                    key={item.sku}
                    className="flex items-center justify-between p-3 border rounded-md hover:bg-gray-50"
                  >
                    <div className="flex-grow">
                      <p className="font-medium text-gray-700">{item.name}</p>
                      <p className="text-xs text-gray-500">
                        SKU: {item.sku} · ${item.price.toFixed(2)} each
                      </p>
                    </div>
                    <div className="flex items-center gap-2 ml-4">
                      <Input
                        type="number"
                        value={item.qty}
                        onChange={(e) => updateCartItemQuantity(item.sku, Number.parseInt(e.target.value))}
                        className="w-16 text-center py-1 px-2 border rounded-md h-8 text-sm"
                        min="0"
                      />
                      <p className="font-semibold w-20 text-right text-sm">${(item.price * item.qty).toFixed(2)}</p>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => updateCartItemQuantity(item.sku, 0)}
                        className="text-red-500 hover:text-red-700 h-8 w-8"
                      >
                        <XCircle className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
            {cart.length > 0 && (
              <div className="mt-6 pt-4 border-t space-y-1 text-right">
                <p className="text-sm text-gray-600">
                  Items:{" "}
                  <span className="font-medium text-gray-800">{cart.reduce((sum, item) => sum + item.qty, 0)}</span>
                </p>
                <p className="text-sm text-gray-600">
                  Subtotal: <span className="font-medium text-gray-800">${subtotal.toFixed(2)}</span>
                </p>
                <p className="text-sm text-gray-600">
                  Tax ({(taxRate * 100).toFixed(0)}%):{" "}
                  <span className="font-medium text-gray-800">${tax.toFixed(2)}</span>
                </p>
                {discount > 0 && (
                  <p className="text-sm text-red-500">
                    Discount: <span className="font-medium">-${discount.toFixed(2)}</span>
                  </p>
                )}
                <p className="text-xl font-bold text-gray-900">Total: ${total.toFixed(2)}</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Right Column: Actions, Info, Settings */}
      <div className="space-y-6">
        {lowStockAlerts.length > 0 && (
          <Card className="border-yellow-400 bg-yellow-50">
            <CardContent className="p-4">
              <div className="flex items-center text-yellow-700">
                <AlertTriangle className="h-5 w-5 mr-2" />
                <h3 className="text-sm font-semibold">Low Stock Warning!</h3>
              </div>
              <ul className="list-disc list-inside text-xs text-yellow-600 mt-1 max-h-20 overflow-y-auto">
                {lowStockAlerts.map((item) => (
                  <li key={item.id}>
                    {item.name} (SKU: {item.sku}) - Stock: {item.stock}
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}
        <Card>
          <CardContent className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-gray-800">
                {currentVertical.charAt(0).toUpperCase() + currentVertical.slice(1)} Actions
              </h2>
              <select
                value={currentStoreId || ""}
                onChange={(e) => {
                  const selected = stores.find((s) => s.id === e.target.value)
                  if (selected) {
                    setCurrentStoreId(selected.id)
                    setCurrentVertical(selected.vertical as StoreVertical)
                  }
                }}
                className="p-1.5 border rounded text-xs bg-white"
              >
                {stores.map((s) => (
                  <option key={s.id} value={s.id}>
                    {s.name}
                  </option>
                ))}
              </select>
            </div>
            <div className="grid grid-cols-2 gap-3 mb-4">
              {(verticalCategories[currentVertical] || ["General Repairs", "Consultation"]).map((cat) => (
                <Button key={cat} variant="outline" className="w-full justify-start text-left py-3 h-auto text-sm">
                  {cat}
                </Button>
              ))}
            </div>
            <div className="flex items-center space-x-2 mb-4">
              <Input
                type="checkbox"
                id="estimateMode"
                checked={estimateMode}
                onChange={(e) => setEstimateMode(e.target.checked)}
                className="h-4 w-4"
              />
              <label htmlFor="estimateMode" className="text-sm font-medium text-gray-700">
                Create Estimate Only
              </label>
            </div>
            <div className="grid grid-cols-2 gap-3">
              <Button variant="outline" className="w-full text-sm" onClick={() => router.push("/tickets")}>
                {" "}
                <ListChecks className="mr-2 h-4 w-4" /> View Tickets
              </Button>
              <Button variant="outline" className="w-full text-sm" onClick={() => router.push("/invoices")}>
                {" "}
                <FileText className="mr-2 h-4 w-4" /> View Invoices
              </Button>
              <Button variant="outline" className="w-full text-sm" onClick={() => setEstimateMode(true)}>
                {" "}
                <Tag className="mr-2 h-4 w-4" /> Create Estimate
              </Button>
              <Button
                onClick={() => router.push(getCreateTicketUrl())}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white text-sm"
              >
                {" "}
                <FileText className="mr-2 h-4 w-4" /> Create Ticket
              </Button>
              <Button
                onClick={handleCheckout}
                className="w-full bg-green-600 hover:bg-green-700 text-white col-span-2 py-3 text-lg"
                disabled={cart.length === 0 || !isTechClockedIn}
                title={!isTechClockedIn ? "Technician must be clocked in to checkout" : ""}
              >
                {estimateMode ? "Save Estimate" : "Checkout & Process"}
              </Button>
              <Button variant="outline" className="w-full text-sm">
                Warranty Claim
              </Button>
              <Button variant="outline" className="w-full text-sm">
                {" "}
                <BarChart2 className="mr-2 h-4 w-4" /> End of Day
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold mb-3 text-gray-800">Recent GBT Rewards</h3>
            {rewards.length > 0 ? (
              <ul className="text-sm space-y-2 max-h-40 overflow-y-auto">
                {rewards.map((r) => (
                  <li key={r.id} className="p-2 border-b last:border-b-0 text-gray-600">
                    <span className="font-medium text-gray-700">{r.customer_name || "Unknown"}</span> earned{" "}
                    <span className="font-semibold text-green-600">{r.gbt_awarded || 0} GBT</span>
                    <span className="block text-xs text-gray-400">
                      {new Date(r.timestamp).toLocaleDateString()} {new Date(r.timestamp).toLocaleTimeString()}
                    </span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-gray-500">No recent rewards.</p>
            )}
          </CardContent>
        </Card>
        {/* Technician Tickets (Example Display) */}
        {isTechClockedIn && technicianTickets.length > 0 && (
          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold mb-3 text-gray-800">My Open Tickets</h3>
              <ul className="text-sm space-y-2 max-h-40 overflow-y-auto">
                {technicianTickets
                  .filter((t) => t.status === "Open" && (t.assigned_technician === techName || !t.assigned_technician))
                  .slice(0, 5)
                  .map((ticket) => (
                    <li
                      key={ticket.id}
                      className="p-2 border-b last:border-b-0 text-gray-600 hover:bg-gray-50 cursor-pointer"
                      onClick={() => router.push(`/tickets/${ticket.id}`)}
                    >
                      <span className="font-medium text-gray-700">Ticket #{ticket.id?.substring(0, 8)}</span> for{" "}
                      {ticket.customer_name}
                      <span className="block text-xs text-gray-400">
                        Total: ${ticket.total.toFixed(2)} - {new Date(ticket.created_at).toLocaleDateString()}
                      </span>
                    </li>
                  ))}
              </ul>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
